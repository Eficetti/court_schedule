// Mocks generated by Mockito 5.4.4 from annotations
// in court_scheduling/test/presentation/reserve/cubit/reserve_cubit/isCourtAvailable.welltested_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:court_scheduling/data/local/local_storage.dart' as _i4;
import 'package:court_scheduling/domain/entity/court/court.dart' as _i2;
import 'package:court_scheduling/domain/entity/reserve/reserve.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCourt_1 extends _i1.SmartFake implements _i2.Court {
  _FakeCourt_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _Fake$ReserveCopyWith_2<$Res> extends _i1.SmartFake
    implements _i3.$ReserveCopyWith<$Res> {
  _Fake$ReserveCopyWith_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalStorage extends _i1.Mock implements _i4.LocalStorage {
  MockLocalStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> saveReserves(List<_i3.Reserve>? reservedCourts) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveReserves,
          [reservedCourts],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i3.Reserve>> loadReserves() => (super.noSuchMethod(
        Invocation.method(
          #loadReserves,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Reserve>>.value(<_i3.Reserve>[]),
      ) as _i5.Future<List<_i3.Reserve>>);
}

/// A class which mocks [Reserve].
///
/// See the documentation for Mockito's code generation for more information.
class MockReserve extends _i1.Mock implements _i3.Reserve {
  MockReserve() {
    _i1.throwOnMissingStub(this);
  }

  @override
  DateTime get date => (super.noSuchMethod(
        Invocation.getter(#date),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#date),
        ),
      ) as DateTime);

  @override
  double get rainChance => (super.noSuchMethod(
        Invocation.getter(#rainChance),
        returnValue: 0.0,
      ) as double);

  @override
  DateTime get createdAt => (super.noSuchMethod(
        Invocation.getter(#createdAt),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#createdAt),
        ),
      ) as DateTime);

  @override
  DateTime get updatedAt => (super.noSuchMethod(
        Invocation.getter(#updatedAt),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.getter(#updatedAt),
        ),
      ) as DateTime);

  @override
  String get userReserve => (super.noSuchMethod(
        Invocation.getter(#userReserve),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#userReserve),
        ),
      ) as String);

  @override
  _i2.Court get reservedCourt => (super.noSuchMethod(
        Invocation.getter(#reservedCourt),
        returnValue: _FakeCourt_1(
          this,
          Invocation.getter(#reservedCourt),
        ),
      ) as _i2.Court);

  @override
  _i3.$ReserveCopyWith<_i3.Reserve> get copyWith => (super.noSuchMethod(
        Invocation.getter(#copyWith),
        returnValue: _Fake$ReserveCopyWith_2<_i3.Reserve>(
          this,
          Invocation.getter(#copyWith),
        ),
      ) as _i3.$ReserveCopyWith<_i3.Reserve>);

  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}
